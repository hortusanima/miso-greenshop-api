// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using miso_greenshop_api.Infrastructure.Persistance;

#nullable disable

namespace miso_greenshop_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250524091235_InitializeDatabase")]
    partial class InitializeDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("greenshop_api.Domain.Models.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("text");

                    b.Property<double>("CartPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("greenshop_api.Domain.Models.CartItem", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("text");

                    b.Property<string>("PlantId")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("CartId", "PlantId");

                    b.HasIndex("PlantId");

                    b.HasIndex("CartId", "PlantId")
                        .IsUnique();

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("greenshop_api.Domain.Models.Plant", b =>
                {
                    b.Property<string>("PlantId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Acquisition_Date")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiningRoom_Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LivingRoom_Description")
                        .HasColumnType("text");

                    b.Property<string>("Long_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Office_Description")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<int>("Sale_Percent")
                        .HasColumnType("integer");

                    b.Property<int>("Sale_Percent_Private")
                        .HasColumnType("integer");

                    b.Property<string>("Short_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.HasKey("PlantId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("greenshop_api.Domain.Models.Review", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("PlantId")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Creation_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "PlantId");

                    b.HasIndex("PlantId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("greenshop_api.Domain.Models.Subscriber", b =>
                {
                    b.Property<string>("SubscriberId")
                        .HasColumnType("text");

                    b.Property<string>("SubscriberEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubscriberId");

                    b.HasIndex("SubscriberEmail")
                        .IsUnique();

                    b.ToTable("Subscribers");
                });

            modelBuilder.Entity("greenshop_api.Domain.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<bool>("IsSubscribed")
                        .HasColumnType("boolean");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("greenshop_api.Domain.Models.Cart", b =>
                {
                    b.HasOne("greenshop_api.Domain.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("greenshop_api.Domain.Models.CartItem", b =>
                {
                    b.HasOne("greenshop_api.Domain.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("greenshop_api.Domain.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("greenshop_api.Domain.Models.Review", b =>
                {
                    b.HasOne("greenshop_api.Domain.Models.Plant", "Plant")
                        .WithMany("Reviews")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("greenshop_api.Domain.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("greenshop_api.Domain.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("greenshop_api.Domain.Models.Plant", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("greenshop_api.Domain.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
